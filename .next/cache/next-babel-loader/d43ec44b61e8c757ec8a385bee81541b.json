{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\nconst API_URL = 'https://api.amfoss.in/';\nexport default (({\n  query2,\n  variables\n}) => {\n  const body = {\n    query2,\n    variables\n  };\n  const token = cookies.get('token');\n  const apiConfig = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: token ? `JWT ${token}` : null\n    },\n    body: JSON.stringify(body)\n  };\n  return fetch(API_URL, apiConfig).then(function (response) {\n    const contentType = response.headers.get('content-type');\n    if (response.ok) {\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        return response.json().then(json => json);\n      }\n      if (contentType && contentType.indexOf('text') !== -1) {\n        return response.text().then(text => text);\n      }\n      return response;\n    }\n    console.error(`Response status ${response.status} during dataFetch for url ${response.url}.`);\n    throw response;\n  });\n});","map":{"version":3,"names":["fetch","Cookies","cookies","API_URL","query2","variables","body","token","get","apiConfig","method","headers","Authorization","JSON","stringify","then","response","contentType","ok","indexOf","json","text","console","error","status","url"],"sources":["/home/ash/react projects/amFOSS-webapp/utils/dataFetch.js"],"sourcesContent":["import fetch from 'isomorphic-fetch';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\nconst API_URL = 'https://api.amfoss.in/';\n\nexport default ({ query2, variables }) => {\n  const body = {\n    query2,\n    variables,\n  };\n\n  const token = cookies.get('token');\n\n  const apiConfig = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: token ? `JWT ${token}` : null,\n    },\n    body: JSON.stringify(body),\n  };\n\n  return fetch(API_URL, apiConfig).then(function (response) {\n    const contentType = response.headers.get('content-type');\n    if (response.ok) {\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        return response.json().then((json) => json);\n      }\n      if (contentType && contentType.indexOf('text') !== -1) {\n        return response.text().then((text) => text);\n      }\n      return response;\n    }\n    console.error(\n      `Response status ${response.status} during dataFetch for url ${response.url}.`\n    );\n    throw response;\n  });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,kBAAkB;AAEtC,MAAMC,OAAO,GAAG,IAAID,OAAO,EAAE;AAC7B,MAAME,OAAO,GAAG,wBAAwB;AAExC,gBAAe,CAAC;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EACxC,MAAMC,IAAI,GAAG;IACXF,MAAM;IACNC;EACF,CAAC;EAED,MAAME,KAAK,GAAGL,OAAO,CAACM,GAAG,CAAC,OAAO,CAAC;EAElC,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAEL,KAAK,GAAI,OAAMA,KAAM,EAAC,GAAG;IAC1C,CAAC;IACDD,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACR,IAAI;EAC3B,CAAC;EAED,OAAON,KAAK,CAACG,OAAO,EAAEM,SAAS,CAAC,CAACM,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACxD,MAAMC,WAAW,GAAGD,QAAQ,CAACL,OAAO,CAACH,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIQ,QAAQ,CAACE,EAAE,EAAE;MACf,IAAID,WAAW,IAAIA,WAAW,CAACE,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;QACjE,OAAOH,QAAQ,CAACI,IAAI,EAAE,CAACL,IAAI,CAAEK,IAAI,IAAKA,IAAI,CAAC;MAC7C;MACA,IAAIH,WAAW,IAAIA,WAAW,CAACE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QACrD,OAAOH,QAAQ,CAACK,IAAI,EAAE,CAACN,IAAI,CAAEM,IAAI,IAAKA,IAAI,CAAC;MAC7C;MACA,OAAOL,QAAQ;IACjB;IACAM,OAAO,CAACC,KAAK,CACV,mBAAkBP,QAAQ,CAACQ,MAAO,6BAA4BR,QAAQ,CAACS,GAAI,GAAE,CAC/E;IACD,MAAMT,QAAQ;EAChB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}