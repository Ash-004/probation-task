{"ast":null,"code":"var __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useEffect, useState } from 'react';\nimport { extendMoment } from 'moment-range';\nimport Moment from 'moment';\n\n// antd components\nimport Card from 'antd/lib/card';\nimport DatePicker from 'antd/lib/date-picker';\nimport Avatar from 'antd/lib/avatar';\nimport Base from '../../components/base';\nimport dataFetch from '../../utils/dataFetch';\nimport TitleBar from '../../components/titlebar';\nconst moment = extendMoment(Moment);\nconst {\n  Meta\n} = Card;\nconst Messages = props => {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: date,\n    1: setDate\n  } = useState(moment().subtract(1, 'days').format('YYYY-MM-DD'));\n  const {\n    0: isLoaded,\n    1: setLoaded\n  } = useState(false);\n  const query = `\n    query($date: Date!){\n      getStatusUpdates(date: $date){\n        member{\n          username\n          fullName\n          profile{\n            profilePic\n          }\n          avatar{\n            githubUsername\n          }\n        }\n        timestamp\n        message\n      } \n    }`;\n  const fetchData = async variables => dataFetch({\n    query,\n    variables\n  });\n  useEffect(() => {\n    if (!isLoaded) {\n      fetchData({\n        date\n      }).then(r => {\n        setData(r.data.getStatusUpdates);\n        setLoaded(true);\n      });\n    }\n  });\n  const routes = [{\n    path: '/',\n    name: 'Home'\n  }, {\n    path: '/status-updates/dashboard',\n    name: 'Status Update'\n  }, {\n    path: '/status-updates/messages',\n    name: 'Messages'\n  }];\n  return __jsx(Base, _extends({\n    title: \"Messages | Status Updates \"\n  }, props), __jsx(TitleBar, {\n    routes: routes,\n    title: \"Status Update\",\n    subTitle: \"View daily status update of club members\"\n  }), __jsx(DatePicker, {\n    className: \"mx-4\",\n    size: \"large\",\n    onChange: e => {\n      setLoaded(false);\n      setDate(e.format('YYYY-MM-DD'));\n    },\n    format: \"DD-MM-YYYY\",\n    value: moment(date)\n  }), __jsx(\"div\", {\n    className: \"m-0\"\n  }, data.length > 0 ? data.map(message => __jsx(\"div\", {\n    className: \"m-4\",\n    key: message\n  }, __jsx(Card, {\n    loading: !isLoaded,\n    type: \"inner\",\n    title: __jsx(Meta, {\n      avatar: __jsx(Avatar, {\n        src: message.member.profile.profilePic ? `https://api.amfoss.in/${message.member.profile.profilePic}` : `https://avatars.githubusercontent.com/${message.member.avatar.githubUsername}`\n      }),\n      title: message.member.fullName\n    })\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: message.message\n    }\n  })))) : __jsx(\"h6\", {\n    className: \"text-center ant-list-empty-text\"\n  }, \"Can't find any status updates\")));\n};\nexport default Messages;","map":{"version":3,"names":["React","useEffect","useState","extendMoment","Moment","Card","DatePicker","Avatar","Base","dataFetch","TitleBar","moment","Meta","Messages","props","data","setData","date","setDate","subtract","format","isLoaded","setLoaded","query","fetchData","variables","then","r","getStatusUpdates","routes","path","name","__jsx","_extends","title","subTitle","className","size","onChange","e","value","length","map","message","key","loading","type","avatar","src","member","profile","profilePic","githubUsername","fullName","dangerouslySetInnerHTML","__html"],"sources":["/home/ash/react projects/amFOSS-webapp/pages/status-updates/messages.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { extendMoment } from 'moment-range';\nimport Moment from 'moment';\n\n// antd components\nimport Card from 'antd/lib/card';\nimport DatePicker from 'antd/lib/date-picker';\nimport Avatar from 'antd/lib/avatar';\n\nimport Base from '../../components/base';\nimport dataFetch from '../../utils/dataFetch';\nimport TitleBar from '../../components/titlebar';\n\nconst moment = extendMoment(Moment);\nconst { Meta } = Card;\n\nconst Messages = (props) => {\n  const [data, setData] = useState([]);\n  const [date, setDate] = useState(\n    moment().subtract(1, 'days').format('YYYY-MM-DD')\n  );\n  const [isLoaded, setLoaded] = useState(false);\n\n  const query = `\n    query($date: Date!){\n      getStatusUpdates(date: $date){\n        member{\n          username\n          fullName\n          profile{\n            profilePic\n          }\n          avatar{\n            githubUsername\n          }\n        }\n        timestamp\n        message\n      } \n    }`;\n\n  const fetchData = async (variables) => dataFetch({ query, variables });\n\n  useEffect(() => {\n    if (!isLoaded) {\n      fetchData({ date }).then((r) => {\n        setData(r.data.getStatusUpdates);\n        setLoaded(true);\n      });\n    }\n  });\n\n  const routes = [\n    {\n      path: '/',\n      name: 'Home',\n    },\n    {\n      path: '/status-updates/dashboard',\n      name: 'Status Update',\n    },\n    {\n      path: '/status-updates/messages',\n      name: 'Messages',\n    },\n  ];\n\n  return (\n    <Base title=\"Messages | Status Updates \" {...props}>\n      <TitleBar\n        routes={routes}\n        title=\"Status Update\"\n        subTitle=\"View daily status update of club members\"\n      />\n      <DatePicker\n        className=\"mx-4\"\n        size=\"large\"\n        onChange={(e) => {\n          setLoaded(false);\n          setDate(e.format('YYYY-MM-DD'));\n        }}\n        format=\"DD-MM-YYYY\"\n        value={moment(date)}\n      />\n      <div className=\"m-0\">\n        {data.length > 0 ? (\n          data.map((message) => (\n            <div className=\"m-4\" key={message}>\n              <Card\n                loading={!isLoaded}\n                type=\"inner\"\n                title={\n                  <Meta\n                    avatar={\n                      <Avatar\n                        src={\n                          message.member.profile.profilePic\n                            ? `https://api.amfoss.in/${message.member.profile.profilePic}`\n                            : `https://avatars.githubusercontent.com/${message.member.avatar.githubUsername}`\n                        }\n                      />\n                    }\n                    title={message.member.fullName}\n                  />\n                }\n              >\n                <div dangerouslySetInnerHTML={{ __html: message.message }} />\n              </Card>\n            </div>\n          ))\n        ) : (\n          <h6 className=\"text-center ant-list-empty-text\">\n            Can't find any status updates\n          </h6>\n        )}\n      </div>\n    </Base>\n  );\n};\n\nexport default Messages;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}